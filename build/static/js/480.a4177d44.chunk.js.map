{"version":3,"file":"static/js/480.a4177d44.chunk.js","mappings":"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","sources":["pages/Notification.jsx"],"sourcesContent":["// import axios from \"axios\";\n// import { useEffect, useState, useRef } from \"react\";\n// import { AiFillDelete } from \"react-icons/ai\";\n// import { ToastContainer, toast } from \"react-toastify\";\n// import Swal from \"sweetalert2\";\n// import CloseIcon from \"@mui/icons-material/Close\";\n\n// const pageSize =10;\n// const Notification = () => {\n//   const [data, setData] = useState(\"\");\n//   const [inpdata, setInpdata] = useState({\n//     send_to: \"\", user_id: \"\", title: \"\", description: \"\"\n//   });\n//   const [showContent, setShowContent] = useState(false);\n//   const [showContent1, setShowContent1] = useState(false);\n//   const [clientlist, setClientlist] = useState([]);\n//    const [currentPage, setCurrentPage] = useState(1);\n//   const [error, setError] = useState(\"\");\n//   const [stafflist, setStafflist] = useState([]);\n//   const nameRef = useRef();\n//   const emailRef = useRef();\n//   const messageRef = useRef();\n\n//   const handledelete = (id) => {\n//     Swal.fire({\n//       title: \"Are you sure?\",\n//       text: \"You won't be able to revert this!\",\n//       icon: \"warning\",\n//       showCancelButton: true,\n//       confirmButtonColor: \"#3085d6\",\n//       cancelButtonColor: \"#d33\",\n//       confirmButtonText: \"Yes, delete it!\"\n//     }).then((result) => {\n//       if (result.isConfirmed) {\n//         axios.post(`${process.env.REACT_APP_BASE_URL}delete-notification`, { notification_id: id }).then((response) => {\n//           toast.success(response.data.message);\n//           showdata();\n//         }).catch((error) => {\n//           toast.error(error.response.data.message);\n//         });\n//         Swal.fire({\n//           title: \"Deleted!\",\n//           text: \"Your file has been deleted.\",\n//           icon: \"success\"\n//         });\n//       }\n//     });\n//   };\n\n//   const showdata = () => {\n//     axios.post(`${process.env.REACT_APP_BASE_URL}notification-list`).then((response) => {\n//       setData(response.data.data);\n//     });\n//   };\n\n//   const totalPage = Math.ceil(data.length / pageSize);\n//   const startIndex = (currentPage - 1) * pageSize;\n//   const endIndex = startIndex + pageSize;\n//   const currentdata = data.slice(startIndex, endIndex);\n//   useEffect(() => {\n//     showdata();\n//   }, []);\n\n//   const handlechange = (e) => {\n//     const { name, value } = e.target;\n//     setInpdata({ ...inpdata, [name]: value });\n//     if (name === \"send_to\") {\n//       setShowContent(value === \"4\");\n//       setShowContent1(value === \"3\");\n//     }\n//   };\n\n//   const handelvalidate = (value) => {\n//     let error = {};\n//     if (!value.title) {\n//       error.title = \"Title is required\";\n//     }\n//     if (!value.description) {\n//       error.description = \"Description is required\";\n//     }\n//     if (!error.title && !error.description) {\n//       apihit();\n//     }\n//     setError(error);\n//   };\n\n//   const postdata = () => {\n//     handelvalidate(inpdata);\n//   };\n\n//   const apihit = () => {\n//     axios.post(`${process.env.REACT_APP_BASE_URL}send-notification`, inpdata).then((response) => {\n//       toast.success(response.data.message);\n//       nameRef.current.value = \"\";\n//       emailRef.current.value = \"\";\n//       messageRef.current.value = \"\";\n//       showdata();\n//     });\n//   };\n\n//   const handleclickshow = () => {\n//     axios.get(`${process.env.REACT_APP_BASE_URL}staff-list`).then((response) => {\n//       setStafflist(response.data.data);\n//     });\n//   };\n\n//   const handleclickshow1 = () => {\n//     axios.get(`${process.env.REACT_APP_BASE_URL}clientlist`).then((response) => {\n//       setClientlist(response.data.data);\n//     });\n//   };\n\n//   const handlePageChange = (page) => {\n//     setCurrentPage(page);\n//   };\n//   return (\n//     <>\n//       <div className=\"wpWrapper\">\n//         <div className=\"container-fluid\">\n//           <div>\n//             <div>\n//               <div className=\"row manageFreight\">\n//                 <div className=\"col-12\">\n//                   <div className='d-flex justify-content-between align-item-center'>\n//                     <div className=\"\">\n//                       <h4 className=\"freight_hd\">Notification</h4>\n//                     </div>\n//                     <div className=\"\">\n//                       <button type=\"button\" data-bs-toggle=\"modal\" data-bs-target=\"#exampleModal\">\n//                         Send Notification\n//                       </button>\n//                     </div>\n//                   </div>\n//                 </div>\n//               </div>\n//               <div className=\"modal fade modalBorder\" id=\"exampleModal\" tabIndex={-1} aria-labelledby=\"exampleModalLabel\" aria-hidden=\"true\">\n//                 <div className=\"modal-dialog modal-dialog-centered\">\n//                   <div className=\"modal-content\">\n//                     <div className=\"modal-header\">\n//                       <h5 className=\"modal-title\" id=\"exampleModalLabel\">Add Notification</h5>\n//                       <button type=\"button\" className=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\">\n//                       <CloseIcon/>\n//                       </button>\n//                     </div>\n//                     <div className=\"modal-body notifiAddmodal\">\n//                       <div className=\"d-flex justify-content-between\">\n//                         <div>\n//                           <input type=\"radio\" id=\"all_user\" value=\"2\" ref={nameRef} name=\"send_to\" onChange={handlechange} />\n//                           <label for=\"all_user\" className=\"ms-1\">All User</label>\n//                         </div>\n//                         <div>\n//                           <input type=\"radio\" id=\"All_Staff\" value=\"1\" name=\"send_to\" onChange={handlechange} />\n//                           <label for=\"All_Staff\" className=\"ms-1\">All Staff</label>\n//                         </div>\n//                         <div>\n//                           <input type=\"radio\" id=\"Particular_user\" value=\"3\" onClick={handleclickshow1} name=\"send_to\" onChange={handlechange} />\n//                           <label for=\"Particular_user\" className=\"ms-1\">Particular User</label>\n//                         </div>\n//                         <div>\n//                           <input type=\"radio\" id=\"Particular_staff\" value=\"4\" onClick={handleclickshow} name=\"send_to\" onChange={handlechange} />\n//                           <label for=\"Particular_staff\" className=\"ms-1\">Particular Staff</label>\n//                         </div>\n//                       </div>\n//                       {showContent1 && (\n//                         <div>\n//                           <label className=\"mt-3\">Particular User</label><br />\n//                           <select name=\"user_id\" className=\"w-100 p-2 rounded\" onChange={handlechange}>\n//                             <option className=\"ps-2\">Select...</option>\n//                             {clientlist.length > 0 && clientlist.map((item, index) => (\n//                               <option key={index} value={item.id}>{item.client_name}</option>\n//                             ))}\n//                           </select>\n//                         </div>\n//                       )}\n//                       {showContent && (\n//                         <div>\n//                           <label className=\"mt-3\">Particular Staff</label><br />\n//                           <select name=\"user_id\" className=\"w-100 p-2 border-1 rounded\" onChange={handlechange}>\n//                             <option>Select...</option>\n//                             {stafflist.length > 0 && stafflist.map((item, index) => (\n//                               <option key={index} value={item.id}>{item.full_name}</option>\n//                             ))}\n//                           </select>\n//                         </div>\n//                       )}\n//                       <div>\n//                         <label>Title</label>\n//                         <input type=\"text\" onChange={handlechange} ref={emailRef} name=\"title\" placeholder=\"Title\" className=\"form-control\" />\n//                         <p className=\"text-danger\">{error.title}</p>\n//                       </div>\n//                       <div>\n//                         <label>Message</label>\n//                         <textarea type=\"text\" ref={messageRef} onChange={handlechange} placeholder=\"Message\" name=\"description\" className=\"form-control\" />\n//                         <p className=\"text-danger mb-0\">{error.description}</p>\n//                       </div>\n//                     </div>\n//                     <div className=\"modal-footer\">\n//                       <button type=\"button\" onClick={postdata} className=\"btn btn-primary\">\n//                         Send Notification\n//                       </button>\n//                     </div>\n//                   </div>\n//                 </div>\n//               </div>\n//               <div className=\"table-responsive mt-2\">\n//                 <table className=\"table table-striped tableICon\">\n//                   <thead>\n//                     <tr>\n//                       <th scope=\"col\">Sr.No.</th>\n//                       <th scope=\"col\">Title</th>\n//                       <th scope=\"col\">Message</th>\n//                       <th scope=\"col\">Date</th>\n//                       <th scope=\"col\">Action</th>\n//                     </tr>\n//                   </thead>\n//                   <tbody style={{ border: \"none\" }}>\n//                     {currentdata.length > 0 && currentdata.map((item, index) => {\n//                       const date = new Date(item?.created_at);\n//                       const formattedDate = date.toLocaleDateString(\"en-GB\", {\n//                         day: \"numeric\",\n//                         month: \"long\",\n//                         year: \"numeric\"\n//                       });\n//                       return (\n//                         <tr className=\"border-bottom\" key={index}>\n//                           <th>{index + 1}</th>\n//                           <td>{item.title}</td>\n//                           <td>{item.description}</td>\n//                           <td>{formattedDate}</td>\n//                           <td>\n//                             <div className=\"action_btn1\">\n//                               <AiFillDelete className=\"text-danger\" onClick={() => handledelete(item.id)} style={{cursor:\"pointer\"}} />\n//                             </div>\n//                           </td>\n//                         </tr>\n//                       );\n//                     })}\n//                   </tbody>\n//                 </table>\n//                 <div className=\"text-center d-flex justify-content-end align-items-center\">\n//                       <button\n//                         disabled={currentPage === 1}\n//                         className=\"bg_page\"\n//                         onClick={() => handlePageChange(currentPage - 1)}\n//                       >\n//                         <i class=\"fi fi-rr-angle-small-left page_icon\"></i>\n//                       </button>\n//                       <span className=\"mx-2\">{`Page ${currentPage} of ${totalPage}`}</span>\n//                       <button\n//                         disabled={currentPage === totalPage}\n//                         className=\"bg_page\"\n//                         onClick={() => handlePageChange(currentPage + 1)}\n//                       >\n//                         <i class=\"fi fi-rr-angle-small-right page_icon\"></i>\n//                       </button>\n//                     </div>\n//               </div>\n//             </div>\n//           </div >\n//           <ToastContainer />\n//         </div >\n//       </div >\n//     </>\n//   );\n// };\n\n// export default Notification;\n// import axios from \"axios\";\n// import { useEffect, useState, useRef } from \"react\";\n// import { AiFillDelete } from \"react-icons/ai\";\n// import { ToastContainer, toast } from \"react-toastify\";\n// import Swal from \"sweetalert2\";\n// import Select from \"react-select\";\n// import CloseIcon from \"@mui/icons-material/Close\";\n\n// const pageSize = 10;\n\n// const Notification = () => {\n//   const [data, setData] = useState([]);\n//   const [inpdata, setInpdata] = useState({\n//     send_to: \"\",\n//     user_id: \"\",\n//     title: \"\",\n//     description: \"\",\n//   });\n\n//   const [showContent, setShowContent] = useState(false);\n//   const [showContent1, setShowContent1] = useState(false);\n//   const [showMultiUser, setShowMultiUser] = useState(false);\n//   const [showBatchUser, setShowBatchUser] = useState(false);\n//   const [batchId,setBatchId]=useState(\"\")\n//   const [clientlist, setClientlist] = useState([]);\n//   const [stafflist, setStafflist] = useState([]);\n//   const [batchlist, setBatchlist] = useState([]);\n//   const [batchlist1, setBatchlist1] = useState([]);\n//   const [batchUserList, setBatchUserList] = useState([]);\n//   const [selectedUsers, setSelectedUsers] = useState([]);\n\n//   const [currentPage, setCurrentPage] = useState(1);\n//   const [error, setError] = useState({});\n//   const nameRef = useRef();\n//   const emailRef = useRef();\n//   const messageRef = useRef();\n\n//   const handledelete = (id) => {\n//     Swal.fire({\n//       title: \"Are you sure?\",\n//       text: \"You won't be able to revert this!\",\n//       icon: \"warning\",\n//       showCancelButton: true,\n//       confirmButtonColor: \"#3085d6\",\n//       cancelButtonColor: \"#d33\",\n//       confirmButtonText: \"Yes, delete it!\",\n//     }).then((result) => {\n//       if (result.isConfirmed) {\n//         axios\n//           .post(`${process.env.REACT_APP_BASE_URL}delete-notification`, {\n//             notification_id: id,\n//           })\n//           .then((response) => {\n//             toast.success(response.data.message);\n//             showdata();\n//           })\n//           .catch((error) => {\n//             toast.error(error.response.data.message);\n//           });\n//       }\n//     });\n//   };\n\n//   const showdata = () => {\n//     axios\n//       .post(`${process.env.REACT_APP_BASE_URL}notification-list`)\n//       .then((response) => {\n//         setData(response.data.data);\n//       });\n//   };\n\n//   const totalPage = Math.ceil(data.length / pageSize);\n//   const startIndex = (currentPage - 1) * pageSize;\n//   const endIndex = startIndex + pageSize;\n//   const currentdata = data.slice(startIndex, endIndex);\n\n//   useEffect(() => {\n//     showdata();\n//   }, []);\n\n//   const handlechange = (e) => {\n//     const { name, value } = e.target;\n//     setInpdata({ ...inpdata, [name]: value });\n\n//     if (name === \"send_to\") {\n//       setShowContent(value === \"4\");\n//       setShowContent1(value === \"3\");\n//       setShowMultiUser(value === \"5\");\n//       setShowBatchUser(value === \"6\");\n\n//       if (value === \"3\" || value === \"5\" || value === \"6\") {\n//         axios\n//           .get(`${process.env.REACT_APP_BASE_URL}clientlist`)\n//           .then((response) => {\n//             setClientlist(response.data.data);\n//           });\n//       }\n//       if (value === \"4\") {\n//         axios\n//           .get(`${process.env.REACT_APP_BASE_URL}staff-list`)\n//           .then((response) => {\n//             setStafflist(response.data.data);\n//           });\n//       }\n//       if (value === \"6\") {\n//         axios\n//           .get(`${process.env.REACT_APP_BASE_URL}getBatchList`)\n//           .then((response) => {\n//             setBatchlist(response.data.data);\n//           });\n//       }\n//     }\n//   };\n\n//   const handleUserMultiSelect = (e) => {\n//     const selected = Array.from(\n//       e.target.selectedOptions,\n//       (option) => option.value\n//     );\n//     setSelectedUsers(selected);\n//     setInpdata({ ...inpdata, user_id: selected.join(\",\") });\n//   };\n//   const handleBatchChange = (e) => {\n//     const batchId = e.target.value;\n//     setBatchId(batchId);\n//   };\n//   const handelvalidate = (value) => {\n//     let error = {};\n//     if (!value.title) error.title = \"Title is required\";\n//     if (!value.description) error.description = \"Description is required\";\n//     if (!error.title && !error.description) {\n//       apihit();\n//     }\n//     setError(error);\n//   };\n//   const postdata = () => {\n//     handelvalidate(inpdata);\n//   };\n//  const apihit = () => {\n//   const inpdata1 = {\n//     send_to: inpdata.send_to,\n//     batch_id: parseInt(batchId),\n//     user_id: inpdata.user_id,\n//     title: inpdata.title,\n//     description: inpdata.description,\n//   };\n//   console.log(inpdata1);\n//   axios\n//     .post(`${process.env.REACT_APP_BASE_URL}send-notification`, inpdata1)\n//     .then((response) => {\n//       toast.success(response.data.message);\n//       setInpdata({\n//         send_to: \"\",\n//         user_id: \"\",\n//         title: \"\",\n//         description: \"\",\n//       });\n//       setSelectedUsers([]);\n//       setShowContent(false);\n//       setShowContent1(false);\n//       setShowMultiUser(false);\n//       setShowBatchUser(false);\n//       showdata();\n//     })\n//     .catch((error) => {\n//       if (error.response) {\n//         const errMsg = error.response.data.message || \"Something went wrong on server.\";\n//         toast.error(`Error: ${errMsg}`);\n//       } else if (error.request) {\n//         toast.error(\"No response from server. Please check your network.\");\n//       } else {\n//         toast.error(`Request error: ${error.message}`);\n//       }\n//       console.error(\"API Error:\", error);\n//     });\n// };\n//   const handlePageChange = (page) => {\n//     setCurrentPage(page);\n//   };\n//   useEffect(() => {\n//     Batchget();\n//   }, []);\n//   const Batchget = async () => {\n//     try {\n//       const response = await axios.get(\n//         `${process.env.REACT_APP_BASE_URL}getAllBatch`\n//       );\n\n//       if (response.data.success === true) {\n//         setBatchlist1(response.data.data);\n//       } else {\n//         console.error(\n//           \"Failed to fetch batches:\",\n//           response.data.message || \"Unknown error\"\n//         );\n//       }\n//     } catch (error) {\n//       console.error(\"Error fetching batches:\", error.message || error);\n//     }\n//   };\n//   return (\n//     <>\n//       <div className=\"wpWrapper\">\n//         <div className=\"container-fluid\">\n//           <div className=\"row manageFreight\">\n//             <div className=\"col-12\">\n//               <div className=\"d-flex justify-content-between align-item-center\">\n//                 <h4 className=\"freight_hd\">Notification</h4>\n//                 <button\n//                   type=\"button\"\n//                   data-bs-toggle=\"modal\"\n//                   data-bs-target=\"#exampleModal\"\n//                 >\n//                   Send Notification\n//                 </button>\n//               </div>\n//             </div>\n//           </div>\n//           <div\n//             className=\"modal fade modalBorder\"\n//             id=\"exampleModal\"\n//             tabIndex={-1}\n//             aria-labelledby=\"exampleModalLabel\"\n//             aria-hidden=\"true\"\n//           >\n//             <div className=\"modal-dialog modal-dialog-centered\">\n//               <div className=\"modal-content\">\n//                 <div className=\"modal-header\">\n//                   <h5 className=\"modal-title\">Add Notification</h5>\n//                   <button\n//                     type=\"button\"\n//                     className=\"btn-close\"\n//                     data-bs-dismiss=\"modal\"\n//                     aria-label=\"Close\"\n//                   >\n//                     <CloseIcon />\n//                   </button>\n//                 </div>\n//                 <div className=\"modal-body notifiAddmodal\">\n//                   <div className=\"d-flex flex-wrap gap-3 mb-3\">\n//                     <label>\n//                       <input\n//                         type=\"radio\"\n//                         value=\"2\"\n//                         name=\"send_to\"\n//                         onChange={handlechange}\n//                       />{\" \"}\n//                       All User\n//                     </label>\n//                     <label>\n//                       <input\n//                         type=\"radio\"\n//                         value=\"1\"\n//                         name=\"send_to\"\n//                         onChange={handlechange}\n//                       />{\" \"}\n//                       All Staff\n//                     </label>\n//                     <label>\n//                       <input\n//                         type=\"radio\"\n//                         value=\"3\"\n//                         name=\"send_to\"\n//                         onChange={handlechange}\n//                       />{\" \"}\n//                       Particular User\n//                     </label>\n//                     <label>\n//                       <input\n//                         type=\"radio\"\n//                         value=\"4\"\n//                         name=\"send_to\"\n//                         onChange={handlechange}\n//                       />{\" \"}\n//                       Particular Staff\n//                     </label>\n//                     <label>\n//                       <input\n//                         type=\"radio\"\n//                         value=\"5\"\n//                         name=\"send_to\"\n//                         onChange={handlechange}\n//                       />{\" \"}\n//                       Multiple Users\n//                     </label>\n//                     <label>\n//                       <input\n//                         type=\"radio\"\n//                         value=\"6\"\n//                         name=\"send_to\"\n//                         onChange={handlechange}\n//                       />{\" \"}\n//                       Users by Batch\n//                     </label>\n//                   </div>\n//                   {showContent1 && (\n//                     <div className=\"mb-3\">\n//                       <label>Particular User</label>\n//                       <select\n//                         name=\"user_id\"\n//                         className=\"form-control\"\n//                         onChange={handlechange}\n//                       >\n//                         <option value=\"\">Select...</option>\n//                         {clientlist.map((item) => (\n//                           <option key={item.id} value={item.id}>\n//                             {item.client_name}\n//                           </option>\n//                         ))}\n//                       </select>\n//                     </div>\n//                   )}\n//                   {showContent && (\n//                     <div className=\"mb-3\">\n//                       <label>Particular Staff</label>\n//                       <select\n//                         name=\"user_id\"\n//                         className=\"form-control\"\n//                         onChange={handlechange}\n//                       >\n//                         <option value=\"\">Select...</option>\n//                         {stafflist.map((item) => (\n//                           <option key={item.id} value={item.id}>\n//                             {item.full_name}\n//                           </option>\n//                         ))}\n//                       </select>\n//                     </div>\n//                   )}\n//                   {showMultiUser && (\n//                     <div className=\"mb-3\">\n//                       <label>Multiple Users</label>\n//                       <Select\n//                         isMulti\n//                         options={clientlist.map((item) => ({\n//                           value: item.id,\n//                           label: item.client_name,\n//                         }))}\n//                         className=\"basic-multi-select\"\n//                         classNamePrefix=\"select\"\n//                         onChange={(selectedOptions) => {\n//                           const selectedIds = selectedOptions.map(\n//                             (option) => option.value\n//                           );\n//                           setSelectedUsers(selectedIds);\n//                           setInpdata({\n//                             ...inpdata,\n//                             user_id: selectedIds.join(\",\"),\n//                           });\n//                         }}\n//                         value={clientlist\n//                           .filter((item) => selectedUsers.includes(item.id))\n//                           .map((item) => ({\n//                             value: item.id,\n//                             label: item.client_name,\n//                           }))}\n//                       />\n//                     </div>\n//                   )}\n\n//                   {showBatchUser && (\n//                     <>\n//                       <div className=\"mb-3\">\n//                         <label>Select Batch</label>\n//                         <select\n//                           className=\"form-control\"\n//                           onChange={handleBatchChange}\n//                         >\n//                           <option value=\"\">Select Batch</option>\n//                           {batchlist1.map((batch, i) => {\n//                             console.log(batch);\n//                             return (\n//                               <>\n//                                 <option key={i} value={batch.id}>\n//                                   {batch.batch_number}\n//                                 </option>\n//                               </>\n//                             );\n//                           })}\n//                         </select>\n//                       </div>\n//                       <div className=\"mb-3\">\n//                         <label>Users in Batch</label>\n//                         <ul>\n//                           {batchUserList.map((user) => (\n//                             <li key={user.id}>{user.client_name}</li>\n//                           ))}\n//                         </ul>\n//                       </div>\n//                     </>\n//                   )}\n\n//                   <div className=\"mb-3\">\n//                     <label>Title</label>\n//                     <input\n//                       type=\"text\"\n//                       name=\"title\"\n//                       ref={emailRef}\n//                       onChange={handlechange}\n//                       className=\"form-control\"\n//                     />\n//                     <p className=\"text-danger\">{error.title}</p>\n//                   </div>\n\n//                   <div className=\"mb-3\">\n//                     <label>Message</label>\n//                     <textarea\n//                       name=\"description\"\n//                       ref={messageRef}\n//                       onChange={handlechange}\n//                       className=\"form-control\"\n//                     />\n//                     <p className=\"text-danger\">{error.description}</p>\n//                   </div>\n//                 </div>\n//                 <div className=\"modal-footer\">\n//                   <button onClick={postdata} className=\"btn btn-primary\">\n//                     Send Notification\n//                   </button>\n//                 </div>\n//               </div>\n//             </div>\n//           </div>\n//           {/* Modal End */}\n\n//           <div className=\"table-responsive mt-2\">\n//             <table className=\"table table-striped\">\n//               <thead>\n//                 <tr>\n//                   <th>Sr.No.</th>\n//                   <th>Title</th>\n//                   <th>Message</th>\n//                   <th>Date</th>\n//                   <th>Action</th>\n//                 </tr>\n//               </thead>\n//               <tbody>\n//                 {currentdata.map((item, index) => {\n//                   const date = new Date(item?.created_at);\n//                   const formattedDate = date.toLocaleDateString(\"en-GB\", {\n//                     day: \"numeric\",\n//                     month: \"long\",\n//                     year: \"numeric\",\n//                   });\n//                   return (\n//                     <tr key={item.id}>\n//                       <td>{startIndex + index + 1}</td>\n//                       <td>{item.title}</td>\n//                       <td>{item.description}</td>\n//                       <td>{formattedDate}</td>\n//                       <td>\n//                         <AiFillDelete\n//                           className=\"text-danger\"\n//                           style={{ cursor: \"pointer\" }}\n//                           onClick={() => handledelete(item.id)}\n//                         />\n//                       </td>\n//                     </tr>\n//                   );\n//                 })}\n//               </tbody>\n//             </table>\n//             <div className=\"d-flex justify-content-end align-items-center\">\n//               <button\n//                 disabled={currentPage === 1}\n//                 onClick={() => handlePageChange(currentPage - 1)}\n//                 className=\"bg_page\"\n//               >\n//                 &lt;\n//               </button>\n//               <span className=\"mx-2\">{`Page ${currentPage} of ${totalPage}`}</span>\n//               <button\n//                 disabled={currentPage === totalPage}\n//                 onClick={() => handlePageChange(currentPage + 1)}\n//                 className=\"bg_page\"\n//               >\n//                 &gt;\n//               </button>\n//             </div>\n//           </div>\n//         </div>\n//         <ToastContainer />\n//       </div>\n//     </>\n//   );\n// };\n\n// export default Notification;\nimport axios from \"axios\";\nimport { useEffect, useState, useRef } from \"react\";\nimport { AiFillDelete } from \"react-icons/ai\";\nimport { ToastContainer, toast } from \"react-toastify\";\nimport Swal from \"sweetalert2\";\nimport Select from \"react-select\";\nimport CloseIcon from \"@mui/icons-material/Close\";\nimport { Modal } from \"bootstrap\";\nconst pageSize = 10;\n\nconst Notification = () => {\n  const [data, setData] = useState([]);\n  const [inpdata, setInpdata] = useState({\n    send_to: \"\",\n    user_id: \"\",\n    title: \"\",\n    description: \"\",\n  });\n\n  const [showContent, setShowContent] = useState(false);\n  const [showContent1, setShowContent1] = useState(false);\n  const [showMultiUser, setShowMultiUser] = useState(false);\n  const [showBatchUser, setShowBatchUser] = useState(false);\n  const [batchId, setBatchId] = useState(\"\");\n\n  const [clientlist, setClientlist] = useState([]);\n  const [stafflist, setStafflist] = useState([]);\n  const [batchlist1, setBatchlist1] = useState([]);\n  const [batchUserList, setBatchUserList] = useState([]);\n  const [selectedUsers, setSelectedUsers] = useState([]);\n\n  const [currentPage, setCurrentPage] = useState(1);\n  const [error, setError] = useState({});\n\n  const emailRef = useRef();\n    const titleRef = useRef();\n  const messageRef = useRef();\n  const selectRef = useRef();\n\n\n  const showdata = () => {\n    axios\n      .post(`${process.env.REACT_APP_BASE_URL}notification-list`)\n      .then((response) => {\n        setData(response.data.data);\n      });\n  };\n\n  const handledelete = (id) => {\n    Swal.fire({\n      title: \"Are you sure?\",\n      text: \"You won't be able to revert this!\",\n      icon: \"warning\",\n      showCancelButton: true,\n      confirmButtonColor: \"#3085d6\",\n      cancelButtonColor: \"#d33\",\n      confirmButtonText: \"Yes, delete it!\",\n    }).then((result) => {\n      if (result.isConfirmed) {\n        axios\n          .post(`${process.env.REACT_APP_BASE_URL}delete-notification`, {\n            notification_id: id,\n          })\n          .then((response) => {\n            toast.success(response.data.message);\n            showdata();\n          })\n          .catch((error) => {\n            toast.error(error.response.data.message);\n          });\n      }\n    });\n  };\n\n  const handlechange = (e) => {\n    const { name, value } = e.target;\n    setInpdata({ ...inpdata, [name]: value });\n\n    if (name === \"send_to\") {\n      setShowContent(value === \"4\");\n      setShowContent1(value === \"3\");\n      setShowMultiUser(value === \"5\");\n      setShowBatchUser(value === \"6\");\n\n      if (value === \"3\" || value === \"5\" || value === \"6\") {\n        axios\n          .get(`${process.env.REACT_APP_BASE_URL}clientlist`)\n          .then((response) => {\n            setClientlist(response.data.data);\n          });\n      }\n      if (value === \"4\") {\n        axios\n          .get(`${process.env.REACT_APP_BASE_URL}staff-list`)\n          .then((response) => {\n            setStafflist(response.data.data);\n          });\n      }\n      if (value === \"6\") {\n        axios\n          .get(`${process.env.REACT_APP_BASE_URL}getBatchList`)\n          .then((response) => {\n            setBatchlist1(response.data.data);\n          });\n      }\n    }\n  };\n\n  const handleBatchChange = (e) => {\n    const id = e.target.value;\n    setBatchId(id);\n\n    if (id) {\n      axios\n        .post(`${process.env.REACT_APP_BASE_URL}getClientByBatchId`, {\n          batch_id: id,\n        })\n        .then((response) => {\n          setBatchUserList(response.data.data);\n          const userIds = response.data.data.map((item) => item.id).join(\",\");\n          setInpdata({ ...inpdata, user_id: userIds });\n        })\n        .catch((error) => {\n      console.log(\"i\")\n          // toast.error(\"Failed to fetch users for the batch.\");\n        });\n    } else {\n      setBatchUserList([]);\n      setInpdata({ ...inpdata, user_id: \"\" });\n    }\n  };\n\n  const handelvalidate = (value) => {\n    let error = {};\n    if (!value.title) error.title = \"Title is required\";\n    if (!value.description) error.description = \"Description is required\";\n    if (!error.title && !error.description) {\n      apihit();\n    }\n    setError(error);\n  };\n\n  const postdata = () => {\n    handelvalidate(inpdata);\n  };\n\n  const apihit = () => {\n    const inpdata1 = {\n      send_to: inpdata.send_to,\n      batch_id: parseInt(batchId),\n      user_id: inpdata.user_id,\n      title: inpdata.title,\n      description: inpdata.description,\n    };\n\n    axios\n      .post(`${process.env.REACT_APP_BASE_URL}send-notification`, inpdata1)\n      .then((response) => {\n        toast.success(response.data.message);\n         const modalEl = document.getElementById(\"exampleModal\");\nconst modalInstance = Modal.getOrCreateInstance(modalEl);\nmodalInstance.hide();\n\n// Clean up leftover backdrop manually\nsetTimeout(() => {\n  document.querySelectorAll(\".modal-backdrop\").forEach((el) => el.remove());\n  document.body.classList.remove(\"modal-open\");\n  document.body.style = \"\";\n}, 300); // wait for animation\n          if (titleRef.current) titleRef.current.value = \"\";\n    if (messageRef.current) messageRef.current.value = \"\";\n        setInpdata({\n          send_to: \"\",\n          user_id: \"\",\n          title: \"\",\n          description: \"\",\n        });\n        setSelectedUsers([]);\n        setShowContent(false);\n        setShowContent1(false);\n        setShowMultiUser(false);\n        setShowBatchUser(false);\n        setBatchId(\"\");\n        setBatchUserList([]);\n        showdata();\n          if (selectRef.current) selectRef.current.value = \"\";\n      })\n      .catch((error) => {\n        if (error.response) {\n          toast.error(`Error: ${error.response.data.message || \"Server error\"}`);\n        } else {\n          toast.error(\"Network or request error.\");\n        }\n      });\n  };\n\n  const handlePageChange = (page) => {\n    setCurrentPage(page);\n  };\n\n  useEffect(() => {\n    showdata();\n    axios.get(`${process.env.REACT_APP_BASE_URL}getAllBatch`).then((response) => {\n      if (response.data.success) {\n        setBatchlist1(response.data.data);\n      }\n    });\n  }, []);\n\n  const totalPage = Math.ceil(data.length / pageSize);\n  const startIndex = (currentPage - 1) * pageSize;\n  const currentdata = data.slice(startIndex, startIndex + pageSize);\n  return (\n    <>\n     <div className=\"wpWrapper\">\n        <div className=\"container-fluid\">\n        <div className=\"d-flex justify-content-between align-items-center mb-3\">\n          <h4>Notification</h4>\n          <button data-bs-toggle=\"modal\" data-bs-target=\"#exampleModal\" className=\"btn btn-primary\">\n            Send Notification\n          </button>\n        </div>\n\n        <div className=\"modal fade\" id=\"exampleModal\" tabIndex=\"-1\">\n          <div className=\"modal-dialog modal-dialog-centered\">\n            <div className=\"modal-content\">\n              <div className=\"modal-header\">\n                <h5 className=\"modal-title\">Add Notification</h5>\n                <button className=\"btn-close\" data-bs-dismiss=\"modal\">\n                  <CloseIcon />\n                </button>\n              </div>\n              <div className=\"modal-body\">\n                <div className=\"d-flex flex-wrap gap-3 mb-3\">\n                  {[\n                    { label: \"All User\", value: \"2\" },\n                    { label: \"All Staff\", value: \"1\" },\n                    { label: \"Particular User\", value: \"3\" },\n                    { label: \"Particular Staff\", value: \"4\" },\n                    { label: \"Multiple Users\", value: \"5\" },\n                    { label: \"Users by Batch\", value: \"6\" },\n                  ].map((opt) => (\n                    <label key={opt.value}>\n                      <input type=\"radio\" value={opt.value} name=\"send_to\" onChange={handlechange} /> {opt.label}\n                    </label>\n                  ))}\n                </div>\n\n                {showContent1 && (\n                  <div className=\"mb-3\">\n                    <label>Particular User</label>\n                    <select name=\"user_id\" className=\"form-control\" onChange={handlechange}>\n                      <option value=\"\">Select...</option>\n                      {clientlist.map((item) => (\n                        <option key={item.id} value={item.id}>{item.client_name}</option>\n                      ))}\n                    </select>\n                  </div>\n                )}\n\n                {showContent && (\n                  <div className=\"mb-3\">\n                    <label>Particular Staff</label>\n                    <select name=\"user_id\" className=\"form-control\" onChange={handlechange}>\n                      <option value=\"\">Select...</option>\n                      {stafflist.map((item) => (\n                        <option key={item.id} value={item.id}>{item.full_name}</option>\n                      ))}\n                    </select>\n                  </div>\n                )}\n\n                {showMultiUser && (\n                  <div className=\"mb-3\">\n                    <label>Multiple Users</label>\n                    <Select\n                      isMulti\n                      options={clientlist.map((item) => ({\n                        value: item.id,\n                        label: item.client_name,\n                      }))}\n                      classNamePrefix=\"select\"\n                      onChange={(selectedOptions) => {\n                        const ids = selectedOptions.map((opt) => opt.value);\n                        setSelectedUsers(ids);\n                        setInpdata({ ...inpdata, user_id: ids.join(\",\") });\n                      }}\n                      value={clientlist\n                        .filter((item) => selectedUsers.includes(item.id))\n                        .map((item) => ({ value: item.id, label: item.client_name }))}\n                    />\n                  </div>\n                )}\n\n                {showBatchUser && (\n                  <>\n                    <div className=\"mb-3\">\n                      <label>Select Batch</label>\n                      <select className=\"form-control\" onChange={handleBatchChange}>\n                        <option value=\"\">Select Batch</option>\n                        {batchlist1.map((batch) => (\n                          <option key={batch.id} value={batch.id}>{batch.batch_number}</option>\n                        ))}\n                      </select>\n                    </div>\n                  </>\n                )}\n\n                <div className=\"mb-3\">\n                  <label>Title</label>\n                  <input type=\"text\" name=\"title\" className=\"form-control\" onChange={handlechange} ref={titleRef} />\n                  <p className=\"text-danger\">{error.title}</p>\n                </div>\n\n                <div className=\"mb-3\">\n                  <label>Message</label>\n                  <textarea name=\"description\" className=\"form-control\" onChange={handlechange} ref={messageRef} />\n                  <p className=\"text-danger\">{error.description}</p>\n                </div>\n              </div>\n              <div className=\"modal-footer\">\n                <button onClick={postdata} className=\"btn btn-primary\">\n                  Send Notification\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Table */}\n        <div className=\"table-responsive mt-2\">\n            <table className=\"table table-striped\">\n              <thead>\n                <tr>\n                  <th>Sr.No.</th>\n                  <th>Title</th>\n                  <th>Message</th>\n                  <th>Date</th>\n                  <th>Action</th>\n                </tr>\n              </thead>\n              <tbody>\n                {currentdata.map((item, index) => {\n                  const date = new Date(item?.created_at);\n                  const formattedDate = date.toLocaleDateString(\"en-GB\", {\n                    day: \"numeric\",\n                    month: \"long\",\n                    year: \"numeric\",\n                  });\n                  return (\n                    <tr key={item.id}>\n                      <td>{startIndex + index + 1}</td>\n                      <td>{item.title}</td>\n                      <td>{item.description}</td>\n                      <td>{formattedDate}</td>\n                      <td>\n                        <AiFillDelete\n                          className=\"text-danger\"\n                          style={{ cursor: \"pointer\" }}\n                          onClick={() => handledelete(item.id)}\n                        />\n                      </td>\n                    </tr>\n                  );\n                })}\n              </tbody>\n            </table>\n\n          {/* Pagination */}\n           <div className=\"d-flex justify-content-end align-items-center\">\n              <button\n                disabled={currentPage === 1}\n                onClick={() => handlePageChange(currentPage - 1)}\n                className=\"bg_page\"\n              >\n                &lt;\n              </button>\n              <span className=\"mx-2\">{`Page ${currentPage} of ${totalPage}`}</span>\n              <button\n                disabled={currentPage === totalPage}\n                onClick={() => handlePageChange(currentPage + 1)}\n                className=\"bg_page\"\n              >\n                &gt;\n              </button>\n            </div>\n        </div>\n      </div>\n\n      <ToastContainer />\n      </div>\n    </>\n  );\n};\n\nexport default Notification;\n"],"names":["Notification","data","setData","useState","inpdata","setInpdata","send_to","user_id","title","description","showContent","setShowContent","showContent1","setShowContent1","showMultiUser","setShowMultiUser","showBatchUser","setShowBatchUser","batchId","setBatchId","clientlist","setClientlist","stafflist","setStafflist","batchlist1","setBatchlist1","batchUserList","setBatchUserList","selectedUsers","setSelectedUsers","currentPage","setCurrentPage","error","setError","titleRef","useRef","messageRef","selectRef","showdata","axios","post","concat","process","then","response","handlechange","e","name","value","target","get","apihit","inpdata1","batch_id","parseInt","toast","success","message","modalEl","document","getElementById","Modal","getOrCreateInstance","hide","setTimeout","querySelectorAll","forEach","el","remove","body","classList","style","current","catch","handlePageChange","page","useEffect","totalPage","Math","ceil","length","startIndex","currentdata","slice","_jsx","_Fragment","children","_jsxs","className","id","tabIndex","CloseIcon","label","map","opt","type","onChange","item","client_name","full_name","Select","isMulti","options","classNamePrefix","selectedOptions","ids","join","filter","includes","userIds","console","log","batch","batch_number","ref","onClick","postdata","handelvalidate","index","formattedDate","Date","created_at","toLocaleDateString","day","month","year","AiFillDelete","cursor","handledelete","Swal","text","icon","showCancelButton","confirmButtonColor","cancelButtonColor","confirmButtonText","result","isConfirmed","notification_id","disabled","ToastContainer"],"sourceRoot":""}